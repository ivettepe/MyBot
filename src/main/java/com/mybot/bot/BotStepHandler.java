package com.mybot.bot;

import com.mybot.model.BotQuery;
import com.mybot.model.Step;
import com.mybot.model.UserSession;
import com.mybot.service.BotService;
import com.mybot.util.InlineKeyboardUtil;
import com.mybot.util.MessageExecutorUtil;
import com.mybot.util.ServiceUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Contact;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;

@Slf4j
@Component
@RequiredArgsConstructor
public class BotStepHandler {

    private final BotService botService;
    private final KeyboardFactory keyboards;

    public void handle(Update update, TelegramLongPollingBot bot) {
        var msg = update.getMessage();

        Long chatId = getChatId(update);
        String text = getMsgText(update);
        UserSession session = botService.session(chatId);

        SendMessage reply = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .build();

        boolean isEdit = session.isEdit();
        boolean isQuery = false;
        log.info("session {}", session);
        switch (session.getStep()) {
            case NONE, START -> isQuery = handleStart(update, bot, text, session, reply);
            case TASK_DESCRIPTION -> handleTaskDescription(text, session, reply, isEdit);
            case NAME -> handleName(text, session, reply, isEdit);
            case PHONE -> handlePhone(msg, text, session, reply, isEdit);
            case PROMOCODE -> handlePromocode(text, session, reply, isEdit);
            case SERVICE -> handleService(text, session, reply);
            case SAVE_OR_EDIT -> handleSaveOrEdit(chatId, text, session, reply);
            case EDIT -> handleEdit(text, session, reply);
            case MAIN_MENU -> handleMainMenu(reply);
            default -> {
                reply.setText("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start");
                reply.setReplyMarkup(keyboards.mainMenu());
                session.setStep(Step.START);
            }
        }
        if (!isQuery) {
            MessageExecutorUtil.safeExecute(bot, reply);
        }
    }

    private boolean handleStart(Update update, TelegramLongPollingBot bot, String text, UserSession session, SendMessage reply) {
        boolean isQuery = false;
        if (text.equalsIgnoreCase(BotQuery.SERVICES.getDescription())) {
            reply.setText(botService.getServicesDescription());
            reply.setReplyMarkup(keyboards.mainMenu2());
            session.setStep(Step.START);
        } else if (text.equalsIgnoreCase(BotQuery.PROMOCODES.getDescription())) {
            reply.setText("–ö–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥—ã");
            reply.setReplyMarkup(keyboards.mainMenu2());
            session.setStep(Step.START);
        } else if (text.equalsIgnoreCase(BotQuery.FAQ.getDescription())) {
            reply.setText("""
                    –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤—ã–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
                    1. ...
                    2. ...
                    3. ...
                    4. ...
                    """);
            reply.setReplyMarkup(keyboards.mainMenu2());
            session.setStep(Step.START);
        } else if (text.equalsIgnoreCase(BotQuery.DEMO.getDescription())) {
            reply.setText("–¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ–º–æ");
            reply.setReplyMarkup(keyboards.mainMenu2());
            session.setStep(Step.START);
        } else if (text.equalsIgnoreCase(BotQuery.GET_SERVICES.getDescription())) {
            reply = SendMessage.builder()
                    .chatId(update.getMessage().getChatId())
                    .text("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏?")
                    .replyMarkup(InlineKeyboardUtil.generateGetServiceMenu())
                    .build();
            isQuery = true;
            MessageExecutorUtil.safeExecute(bot, reply);
        } else {
            reply.setText("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
            reply.setReplyMarkup(keyboards.mainMenu2());
        }
        return isQuery;
    }

    private void handleTaskDescription(String text, UserSession session, SendMessage reply, boolean isEdit) {
        if (text.length() > 500) {
            reply.setText("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —É—Å–ª—É–≥—É –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 500 —Å–∏–º–≤–æ–ª–æ–≤");
            reply.setReplyMarkup(keyboards.removeKeyboard());
            reply.setReplyMarkup(keyboards.skip());
        } else {
            session.setServiceDescription(!"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".equals(text) ? text : "");
            if (isEdit) {
                session.setEdit(false);
                setApplicationText(session, reply);
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.getApplicationButtons());
                session.setStep(Step.SAVE_OR_EDIT);
            } else {
                reply.setText("3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è");
                reply.setReplyMarkup(keyboards.removeKeyboard());
                session.setStep(Step.NAME);
            }
        }
    }

    private void handleName(String text, UserSession session, SendMessage reply, boolean isEdit) {
        if (text.length() < 2) {
            reply.setText("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∏–º—è. –û–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.");
            reply.setReplyMarkup(keyboards.removeKeyboard());
        } else {
            session.setName(text);
            if (isEdit) {
                session.setEdit(false);
                setApplicationText(session, reply);
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.getApplicationButtons());
                session.setStep(Step.SAVE_OR_EDIT);
            } else {
                reply.setText("4. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º");
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.contactButton());
                session.setStep(Step.PHONE);
            }
        }
    }

    private void handlePhone(Message message, String text, UserSession session, SendMessage reply, boolean isEdit) {
        if (message.hasContact()) {
            Contact contact = message.getContact();
            session.setPhone(contact.getPhoneNumber());
            if (isEdit) {
                session.setEdit(false);
                setApplicationText(session, reply);
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.getApplicationButtons());
                session.setStep(Step.SAVE_OR_EDIT);
            } else {
                reply.setText("5. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å");
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.skip());
                session.setStep(Step.PROMOCODE);
            }
        } else if (!text.matches("^\\+?\\d{10,13}$") || (!text.startsWith("+7") && !text.startsWith("8"))) {
            reply.setText("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: +71234567890");
        } else {
            session.setPhone(text);
            if (isEdit) {
                session.setEdit(false);
                setApplicationText(session, reply);
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.getApplicationButtons());
                session.setStep(Step.SAVE_OR_EDIT);
            } else {
                reply.setText("5. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å");
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.skip());
                session.setStep(Step.PROMOCODE);
            }
        }
    }

    private void handleService(String text, UserSession session, SendMessage reply) {
        if (!ServiceUtil.isServiceByDiscription(text)) {
            reply.setText("‚ùå –í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω—É –∏–∑ —É—Å–ª—É–≥ –Ω–∏–∂–µ.");
        } else {
            session.setService(text);
            session.setEdit(false);
            setApplicationText(session, reply);
            reply.setReplyMarkup(keyboards.removeKeyboard());
            reply.setReplyMarkup(keyboards.getApplicationButtons());
            session.setStep(Step.SAVE_OR_EDIT);
        }
    }

    private void handleEdit(String text, UserSession session, SendMessage reply) {
        switch (text) {
            case "–ò–º—è" -> {
                reply.setText("3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è");
                session.setStep(Step.NAME);
            }
            case "–¢–µ–ª–µ—Ñ–æ–Ω" -> {
                reply.setText("4. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º");
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.contactButton());
                session.setStep(Step.PHONE);
            }
            case "–£—Å–ª—É–≥–∞" -> {
                reply.setText("1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É");
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.serviceMenu());
                session.setStep(Step.SERVICE);
            }
            case "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏" -> {
                reply.setText("2. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–ù–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)");
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.skip());
                session.setStep(Step.TASK_DESCRIPTION);
            }
            case "–ü—Ä–æ–º–æ–∫–æ–¥" -> {
                reply.setText("5. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å");
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.skip());
                session.setStep(Step.PROMOCODE);
            }
            case null, default -> reply.setText("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ.");
        }
    }

    private void handlePromocode(String text, UserSession session, SendMessage reply, boolean isEdit) {
        if (false) {

        } else {
            session.setPromocode(!"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".equals(text) ? text : "");
            if (isEdit) {
                session.setEdit(false);
                setApplicationText(session, reply);
                reply.setReplyMarkup(keyboards.removeKeyboard());
                reply.setReplyMarkup(keyboards.getApplicationButtons());
                session.setStep(Step.SAVE_OR_EDIT);
            } else {
                setApplicationText(session, reply);
                reply.setReplyMarkup(keyboards.getApplicationButtons());
                session.setStep(Step.SAVE_OR_EDIT);
            }
        }
    }

    private void handleSaveOrEdit(Long chatId, String text, UserSession session, SendMessage reply) {
        if ("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å".equals(text)) {
            botService.save(chatId);
            reply.setText("""
                    ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.
                    
                    üë§ –ò–º—è: %s
                    üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s
                    üìå –£—Å–ª—É–≥–∞: %s
                    –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: %s
                    –ü—Ä–æ–º–æ–∫–æ–¥: %s
                    
                    üîÅ –û—Å—Ç–∞–≤—å—Ç–µ –µ—â—ë –∑–∞—è–≤–∫—É –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ –ø—Ä–æ —É—Å–ª—É–≥–∏!
                    """.formatted(session.getName(), session.getPhone(),
                    session.getService(), session.getServiceDescription(), session.getPromocode()));
            reply.setReplyMarkup(keyboards.mainMenu2());
            session.setStep(Step.START);
        } else if ("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è".equals(text)) {
            reply.setText("–ö–∞–∫–æ–µ –ø–æ–ª–µ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å");
            reply.setReplyMarkup(keyboards.removeKeyboard());
            reply.setReplyMarkup(keyboards.getEditFieldButtons());
            session.setStep(Step.EDIT);
            session.setEdit(true);
        } else {
            reply.setText("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ.");
        }
    }

    private void setApplicationText(UserSession session, SendMessage reply) {
        reply.setText("""
                –í–∞—à–∞ –∑–∞—è–≤–∫–∞:
                
                üë§ –ò–º—è: %s
                üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s
                üìå –£—Å–ª—É–≥–∞: %s
                –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: %s
                –ü—Ä–æ–º–æ–∫–æ–¥: %s
                
                üîÅ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
                """.formatted(session.getName(), session.getPhone(),
                session.getService(), session.getServiceDescription(), session.getPromocode()));
    }

    private void handleMainMenu(SendMessage reply) {
        reply.setText("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        reply.setReplyMarkup(keyboards.mainMenu2());
    }

    private Long getChatId(Update update) {
        return update.getMessage() != null ? update.getMessage().getChatId() :
                update.getCallbackQuery().getMessage().getChatId();
    }

    private String getMsgText(Update update) {
        return update.getMessage() != null && update.getMessage().hasText() ? update.getMessage().getText() : "";
    }
}
