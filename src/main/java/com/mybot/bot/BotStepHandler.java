package com.mybot.bot;

import com.mybot.model.Step;
import com.mybot.model.UserSession;
import com.mybot.service.BotService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Contact;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class BotStepHandler {

    private final BotService botService;
    private final KeyboardFactory keyboards;

    public void handle(Update update, TelegramLongPollingBot bot) {
        Message msg = update.getMessage();
        Long chatId = msg.getChatId();
        String text = msg.hasText() ? msg.getText() : "";
        UserSession session = botService.session(chatId);

        SendMessage reply = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .build();

        try {
            switch (session.getStep()) {
                case NONE, START -> handleStart(text, session, reply);
                case CONTACT_CHOICE, CONTACT_METHOD -> handleContact(msg, text, session, reply);
                case NAME -> handleName(text, session, reply);
                case PHONE -> handlePhone(text, session, reply);
                case SERVICE -> handleService(text, session, reply, chatId);
                default -> {
                    reply.setText("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start");
                    reply.setReplyMarkup(keyboards.mainMenu());
                    session.setStep(Step.START);
                }
            }
            bot.execute(reply);
        } catch (Exception e) {
            log.error("StepHandler failed", e);
        }
    }

    private void handleStart(String text, UserSession session, SendMessage reply) {
        if (text.equalsIgnoreCase("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")) {
            reply.setText("üìû –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?");
            reply.setReplyMarkup(keyboards.contactChoiceMenu());
            session.setStep(Step.CONTACT_METHOD);
        } else if (text.equalsIgnoreCase("üìã –£–∑–Ω–∞—Ç—å –ø—Ä–æ —É—Å–ª—É–≥–∏")) {
            reply.setText( botService.getServicesDescription());
            reply.setReplyMarkup(keyboards.mainMenu());
            session.setStep(Step.START);
        } else {
            reply.setText("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
            reply.setReplyMarkup(keyboards.mainMenu());
        }
    }

    private void handleContact(Message msg, String text, UserSession session, SendMessage reply) {
        if (msg.hasContact()) {
            Contact contact = msg.getContact();
            session.setName(contact.getFirstName());
            session.setPhone(contact.getPhoneNumber());
            reply.setText("üìå –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:");
            reply.setReplyMarkup(keyboards.serviceMenu());
            session.setStep(Step.SERVICE);
        } else if (text.equalsIgnoreCase("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")) {
            reply.setText("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
            reply.setReplyMarkup(keyboards.removeKeyboard());
            session.setStep(Step.NAME);
        } else {
            reply.setText("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.");
            reply.setReplyMarkup(keyboards.contactChoiceMenu());
        }
    }

    private void handleName(String text, UserSession session, SendMessage reply) {
        if (text.isBlank()) {
            reply.setText("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è:");
        } else {
            session.setName(text.trim());
            reply.setText("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +491234567890):");
            reply.setReplyMarkup(keyboards.removeKeyboard());
            session.setStep(Step.PHONE);
        }
    }

    private void handlePhone(String text, UserSession session, SendMessage reply) {
        if (!text.matches("^\\+?\\d{7,15}$")) {
            reply.setText("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: +491234567890");
        } else {
            session.setPhone(text.trim());
            reply.setText("üìå –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:");
            reply.setReplyMarkup(keyboards.serviceMenu());
            session.setStep(Step.SERVICE);
        }
    }

    private void handleService(String text, UserSession session, SendMessage reply, Long chatId) {
        List<String> services = List.of(
                "ü§ñ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–æ–≤",
                "üß© –°–æ–∑–¥–∞–Ω–∏–µ Mini Apps",
                "üîß –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞",
                "üí° –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        );
        if (!services.contains(text)) {
            reply.setText("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞.");
            reply.setReplyMarkup(keyboards.serviceMenu());
        } else {
            session.setService(text);
            botService.save(chatId);
            reply.setText("""
                    ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.

                    üë§ –ò–º—è: %s
                    üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s
                    üìå –£—Å–ª—É–≥–∞: %s

                    üîÅ –û—Å—Ç–∞–≤—å—Ç–µ –µ—â—ë –∑–∞—è–≤–∫—É –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ –ø—Ä–æ —É—Å–ª—É–≥–∏!
                    """.formatted(session.getName(), session.getPhone(), session.getService()));
            reply.setReplyMarkup(keyboards.mainMenu());
            session.setStep(Step.START);
        }
    }
}
